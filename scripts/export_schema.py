#!/usr/bin/env python3
"""
导出本仓库内各子模块（trading_journal / quant_trading）的 SQL 建表语句。

输出目录：./database/schema/
文件：
  - trading_journal_schema.mysql.sql
  - quant_trading_schema.mysql.sql

依赖：SQLAlchemy（各子项目已包含在 requirements.txt 中）
运行：
  python scripts/export_schema.py
"""
from __future__ import annotations

import os
import sys
from pathlib import Path
from typing import Tuple

from sqlalchemy.schema import CreateTable, CreateIndex
from sqlalchemy.dialects import mysql


ROOT = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(ROOT))


def ensure_out_dir() -> Path:
    out_dir = ROOT / "database" / "schema"
    out_dir.mkdir(parents=True, exist_ok=True)
    return out_dir


def collect_metadata(module_path: str) -> Tuple[object, str]:
    """导入模块，返回 (Base, module_id)。

    module_path 例如："trading_journal.app.models"。
    """
    mod = __import__(module_path, fromlist=["Base"])  # type: ignore
    Base = getattr(mod, "Base")
    module_id = module_path.split(".")[0]
    return Base, module_id


def export_ddl(base, out_file: Path) -> None:
    ddl_lines = []
    dialect = mysql.dialect()

    # 按表名排序，生成稳定输出
    tables = sorted(base.metadata.tables.values(), key=lambda t: t.name)

    for table in tables:
        ddl_lines.append(str(CreateTable(table).compile(dialect=dialect)) + ";\n")
        # 索引（CreateTable 已包含主键/唯一约束，这里补充显式索引）
        for idx in table.indexes:
            ddl_lines.append(str(CreateIndex(idx).compile(dialect=dialect)) + ";\n")

    content = "-- Auto-generated by scripts/export_schema.py\n" \
              "-- Dialect: MySQL\n\n" + "\n".join(ddl_lines)

    out_file.write_text(content, encoding="utf-8")
    print(f"✅ Wrote {out_file}")


def main() -> None:
    out_dir = ensure_out_dir()

    targets = [
        ("trading_journal.app.models", out_dir / "trading_journal_schema.mysql.sql"),
        ("quant_trading.app.models", out_dir / "quant_trading_schema.mysql.sql"),
        ("bitcoin_trader.app.models", out_dir / "bitcoin_trader_schema.mysql.sql"),
    ]

    for module_path, out_file in targets:
        Base, _ = collect_metadata(module_path)
        export_ddl(Base, out_file)


if __name__ == "__main__":
    main()


